# logging_config.yaml


# Default Configuration
version: 1

# Disable previously created loggers and update the root logger at the instant 
#the configuration file is fed.
disable_existing_loggers: true

# Refer filter block for detailed explanation
filters:
    # These are callable modules, where we define class for a filter, upon 
    #execution an object for the class will be created by log manager
    # Format:
    # filter_name:
    #       () : filter class path
    info_filter:
        () : calculator_app.util.log_util.log_util_funcs.InfoFilter

# Logging formatter definition
# For more details on format types, 
# visit - 'https://docs.python.org/3/library/logging.html#logrecord-attributes
formatters:
    # Format:
    # formatter_name:
    #         format: "fmt_specified using pre-defined variables"
    standard:
        format: "%(asctime)s - %(levelname)s - %(name)s(%(module)s-->%(lineno)d) - %(message)s"    
    error:
        format: "%(asctime)s - %(levelname)s <PID %(process)d:%(processName)s> %(name)s.%(funcName)s(): %(message)s"

# Logging handlers
# Console and Error Console belongs to StreamHandler whereas info_file_handler belongs to Rotating File Handler
# For a list of pre-defined handlers, visit - 'https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers'
handlers:
    # Format:
    # handler_name:
    #       handler_attributes: attribute values
    info_file_handler:
        # Class Attribute - Define FileHandler, StreamHandler among other handlers
        class: logging.FileHandler
        # Handler Level
        level: INFO
        # Custom Format defined in formatter block 
        formatter: standard
        # File Name
        filename: info.log
        mode: w
        # Max store value - 10 MB
        # maxBytes: 10485760 
        # Backup count - Rollover attribute
        # backupCount: 20
        # Log format encoding
        # encoding: utf8
        
    console:
        class: logging.StreamHandler
        level: DEBUG
        formatter: standard 
        filters: [info_filter]
        stream: ext://sys.stdout
        
    error_console:
        class: logging.StreamHandler
        level: ERROR
        formatter: error
        stream: ext://sys.stderr
   
# Root Logger Configuration
root:
    # Logger Level - Set to NOTSET if you have child loggers with pre-defined levels
    level: DEBUG
    # Attach handlers for Root Logger
    handlers: [console, error_console]
    # Stop propogation from child to parent in Logging hierarchy
    # propogate: no


# Module level configuration
loggers:
    app.operation:
        level: INFO
        handlers: [info_file_handler]
        propogate: no

    app.terminal:
        level: INFO
        handlers: [info_file_handler]
        propogate: no